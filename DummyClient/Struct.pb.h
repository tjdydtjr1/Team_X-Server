// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class MoveInfo;
struct MoveInfoDefaultTypeInternal;
extern MoveInfoDefaultTypeInternal _MoveInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::MoveInfo* Arena::CreateMaybeMessage<::Protocol::MoveInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return new Vector3();
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MoveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MoveInfo) */ {
 public:
  inline MoveInfo() : MoveInfo(nullptr) {}
  ~MoveInfo() override;
  explicit constexpr MoveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveInfo(const MoveInfo& from);
  MoveInfo(MoveInfo&& from) noexcept
    : MoveInfo() {
    *this = ::std::move(from);
  }

  inline MoveInfo& operator=(const MoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveInfo& operator=(MoveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveInfo* internal_default_instance() {
    return reinterpret_cast<const MoveInfo*>(
               &_MoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveInfo& a, MoveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveInfo* New() const final {
    return new MoveInfo();
  }

  MoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveInfo& from);
  void MergeFrom(const MoveInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MoveInfo";
  }
  protected:
  explicit MoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kYawFieldNumber = 3,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MoveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::Vector3* position_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit constexpr ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectInfo* New() const final {
    return new ObjectInfo();
  }

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectInfo& from);
  void MergeFrom(const ObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kMoveInfoFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kObjectTypeFieldNumber = 3,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Protocol.MoveInfo move_info = 2;
  bool has_move_info() const;
  private:
  bool _internal_has_move_info() const;
  public:
  void clear_move_info();
  const ::Protocol::MoveInfo& move_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::MoveInfo* release_move_info();
  ::Protocol::MoveInfo* mutable_move_info();
  void set_allocated_move_info(::Protocol::MoveInfo* move_info);
  private:
  const ::Protocol::MoveInfo& _internal_move_info() const;
  ::Protocol::MoveInfo* _internal_mutable_move_info();
  public:
  void unsafe_arena_set_allocated_move_info(
      ::Protocol::MoveInfo* move_info);
  ::Protocol::MoveInfo* unsafe_arena_release_move_info();

  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.ObjectType object_type = 3;
  void clear_object_type();
  ::Protocol::ObjectType object_type() const;
  void set_object_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_object_type() const;
  void _internal_set_object_type(::Protocol::ObjectType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Protocol::MoveInfo* move_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  int object_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// MoveInfo

// int64 object_id = 1;
inline void MoveInfo::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveInfo::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MoveInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.object_id)
  return _internal_object_id();
}
inline void MoveInfo::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void MoveInfo::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveInfo.object_id)
}

// .Protocol.Vector3 position = 2;
inline bool MoveInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool MoveInfo::has_position() const {
  return _internal_has_position();
}
inline void MoveInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::Protocol::Vector3& MoveInfo::_internal_position() const {
  const ::Protocol::Vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& MoveInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.position)
  return _internal_position();
}
inline void MoveInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MoveInfo.position)
}
inline ::Protocol::Vector3* MoveInfo::release_position() {
  
  ::Protocol::Vector3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::Vector3* MoveInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.MoveInfo.position)
  
  ::Protocol::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* MoveInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::Vector3* MoveInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.MoveInfo.position)
  return _internal_mutable_position();
}
inline void MoveInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::Vector3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MoveInfo.position)
}

// float yaw = 3;
inline void MoveInfo::clear_yaw() {
  yaw_ = 0;
}
inline float MoveInfo::_internal_yaw() const {
  return yaw_;
}
inline float MoveInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.MoveInfo.yaw)
  return _internal_yaw();
}
inline void MoveInfo::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void MoveInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.MoveInfo.yaw)
}

// -------------------------------------------------------------------

// ObjectInfo

// int64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObjectInfo::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void ObjectInfo::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// .Protocol.MoveInfo move_info = 2;
inline bool ObjectInfo::_internal_has_move_info() const {
  return this != internal_default_instance() && move_info_ != nullptr;
}
inline bool ObjectInfo::has_move_info() const {
  return _internal_has_move_info();
}
inline void ObjectInfo::clear_move_info() {
  if (GetArenaForAllocation() == nullptr && move_info_ != nullptr) {
    delete move_info_;
  }
  move_info_ = nullptr;
}
inline const ::Protocol::MoveInfo& ObjectInfo::_internal_move_info() const {
  const ::Protocol::MoveInfo* p = move_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::MoveInfo&>(
      ::Protocol::_MoveInfo_default_instance_);
}
inline const ::Protocol::MoveInfo& ObjectInfo::move_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.move_info)
  return _internal_move_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_move_info(
    ::Protocol::MoveInfo* move_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_info_);
  }
  move_info_ = move_info;
  if (move_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.move_info)
}
inline ::Protocol::MoveInfo* ObjectInfo::release_move_info() {
  
  ::Protocol::MoveInfo* temp = move_info_;
  move_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::MoveInfo* ObjectInfo::unsafe_arena_release_move_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.move_info)
  
  ::Protocol::MoveInfo* temp = move_info_;
  move_info_ = nullptr;
  return temp;
}
inline ::Protocol::MoveInfo* ObjectInfo::_internal_mutable_move_info() {
  
  if (move_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::MoveInfo>(GetArenaForAllocation());
    move_info_ = p;
  }
  return move_info_;
}
inline ::Protocol::MoveInfo* ObjectInfo::mutable_move_info() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.move_info)
  return _internal_mutable_move_info();
}
inline void ObjectInfo::set_allocated_move_info(::Protocol::MoveInfo* move_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete move_info_;
  }
  if (move_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::MoveInfo>::GetOwningArena(move_info);
    if (message_arena != submessage_arena) {
      move_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_info, submessage_arena);
    }
    
  } else {
    
  }
  move_info_ = move_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.move_info)
}

// .Protocol.ObjectType object_type = 3;
inline void ObjectInfo::clear_object_type() {
  object_type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_object_type() const {
  return static_cast< ::Protocol::ObjectType >(object_type_);
}
inline ::Protocol::ObjectType ObjectInfo::object_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_type)
  return _internal_object_type();
}
inline void ObjectInfo::_internal_set_object_type(::Protocol::ObjectType value) {
  
  object_type_ = value;
}
inline void ObjectInfo::set_object_type(::Protocol::ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_type)
}

// string name = 4;
inline void ObjectInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.name)
}
inline std::string* ObjectInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ObjectInfo::_internal_name() const {
  return name_.Get();
}
inline void ObjectInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
